/*
 * yr_rtm__YR_RTM_REPLACEMENT_QSTRING.cpp
 *
 *      Author: PROF. DR.--ING. XAVIER NOUMBISSI NOUNDOU
 */

#include "yr_rtm__YR_RTM_REPLACEMENT_QSTRING.hpp"


#include <QtSql/QSqlRecord>

#include <QtSql/QSqlQuery>

#include <QtSql/QSqlError>


#include "utils/yr-db-runtime-verif-logger.hpp"

#include "yr_sd_runtime_verif/YR_CPP_MONITOR.hpp"
#include "yr_sd_runtime_verif/YR_CPP_MONITOR_STATE.hpp"
#include "yr_sd_runtime_verif/YR_CPP_MONITOR_EDGE.hpp"



void yr_rtm__YR_RTM_REPLACEMENT_QSTRING::YR_CALL_BACK_final_state(YR_CPP_MONITOR_STATE *a_cal_back_function)
{
	YR_DB_RUNTIME_VERIF_Monitor::YR_DB_RUNTIME_VERIF_Monitor_notify_SUCCESS_VERIFICATION();
}


yr_rtm__YR_RTM_REPLACEMENT_QSTRING::yr_rtm__YR_RTM_REPLACEMENT_QSTRING()
:_a_runtime_monitor(0),
 YR_DB_RUNTIME_VERIF_Monitor()
{
	_a_runtime_monitor =
			YR_CPP_MONITOR::CREATE_MONITOR ("_YR_RTM_REPLACEMENT_QSTRING");

	if (0 != _a_runtime_monitor)
	{	
		_a_runtime_monitor->SET_DB_CONFIGURATION_PARAMETERS("QMYSQL",
															"yeroth_erp_3",
															"localhost",
															"yeroth_erp_3",
															"1234567");
															
		__event_edge_DEFINITIONSYRRTMREPLACEMENTQSTRING__
	}
}


yr_rtm__YR_RTM_REPLACEMENT_QSTRING::yr_rtm__YR_RTM_REPLACEMENT_QSTRING(YR_DB_RUNTIME_VERIF_Logger *logger)
:_a_runtime_monitor(0),
 YR_DB_RUNTIME_VERIF_Monitor(logger)
{
	_a_runtime_monitor =
			YR_CPP_MONITOR::CREATE_MONITOR ("_YR_RTM_REPLACEMENT_QSTRING");

	if (0 != _a_runtime_monitor)
	{
		_a_runtime_monitor->SET_DB_CONFIGURATION_PARAMETERS("QMYSQL",
															"yeroth_erp_3",
															"localhost",
															"yeroth_erp_3",
															"1234567");
																
		__event_edge_DEFINITIONSYRRTMREPLACEMENTQSTRING__
	}
}
	
	
yr_rtm__YR_RTM_REPLACEMENT_QSTRING::~yr_rtm__YR_RTM_REPLACEMENT_QSTRING()
{
	if (0 != _a_runtime_monitor)
	{
		delete _a_runtime_monitor;
	}
}


/**
 * THIS METHOD PERFORMS EFFECTIVE TEMPORAL LINEAR
 * LOGIC CHECK AFTER A STATE EVENT (or system event)
 * could be achieved by the runtime monitor system !
 *
 * A SERIOUS VERIFICATION CLIENT MUST OVERRIDE THIS
 * METHOD !
 */
bool yr_rtm__YR_RTM_REPLACEMENT_QSTRING::DO_VERIFY_AND_or_CHECK_ltl_PROPERTY(
    		QString sql_table,
			uint	sql_record_qty_MODIFIED,
    		YR_CPP_UTILS::SQL_CONSTANT_IDENTIFIER cur_SQL_command 
    		/* = YR_CPP_UTILS::SQL_CONSTANT_IDENTIFIER::UNDEFINED_SQL_COMMAND */)
{	
	bool aRetValue = false;

	qDebug() << "\t [DB_STMT : " << QString::number(cur_SQL_command)
			 << "] _"
			 << YR_CPP_UTILS::_DB_STMT_verification_ToUserViewString.value(cur_SQL_command)
			 << " "
			 << sql_table
			 << QString(" (%1 records)")
			 	 	.arg(QString::number(sql_record_qty_MODIFIED));

	switch(cur_SQL_command)
	{
	case YR_CPP_UTILS::INSERT:
		break;

	case YR_CPP_UTILS::SELECT:
		break;

	case YR_CPP_UTILS::UPDATE:
		break;

	case YR_CPP_UTILS::DELETE:
		break;

	default:

		break;
	}

	return aRetValue;
}

	
__slots_event_DEFINITIONS_YR_RTM_REPLACEMENT_QSTRING__

